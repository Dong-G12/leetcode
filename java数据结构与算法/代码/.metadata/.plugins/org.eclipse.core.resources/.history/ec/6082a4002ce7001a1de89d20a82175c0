package kruskal;

public class KruskalCase {
    
	
	private int edgeNum;
	
	private char[] vertexs;
	
	private int[][] matrix;
	
	private static final int INF = Integer.MAX_VALUE;
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		char[] vertexs = {'A', 'B', 'C', 'D', 'E', 'F', 'G'};
		//克鲁斯卡尔算法的邻接矩阵  
	      int matrix[][] = {
	      /*A*//*B*//*C*//*D*//*E*//*F*//*G*/
	/*A*/ {   0,  12, INF, INF, INF,  16,  14},
	/*B*/ {  12,   0,  10, INF, INF,   7, INF},
	/*C*/ { INF,  10,   0,   3,   5,   6, INF},
	/*D*/ { INF, INF,   3,   0,   4, INF, INF},
	/*E*/ { INF, INF,   5,   4,   0,   2,   8},
	/*F*/ {  16,   7,   6, INF,   2,   0,   9},
	/*G*/ {  14, INF, INF, INF,   8,   9,   0}}; 
	      //大家可以在去测试其它的邻接矩阵，结果都可以得到最小生成树.
	      
	      //创建KruskalCase 对象实例
	      KruskalCase kruskalCase = new KruskalCase(vertexs, matrix);
	      //输出构建的
	      kruskalCase.print();
	   
	      
		
	}
	
	//构造器
	
	public KruskalCase(char[] vertexs,int[][] matrix) {
		int vlen = vertexs.length;
		
		//初始化顶点
		
		this.vertexs = new char[vlen];
		for(int i =0;i<vertexs.length;i++) {
			this.vertexs[i] = vertexs[i];
		}
		
		//初始化边
		this.matrix = new int[vlen][vlen];
		
		//使用的是复制拷贝的方式
		
		for(int i =0;i<vlen;i++) {
			for(int j =0;j<vlen;j++) {
				this.matrix[i][j] = matrix[i][j];
			}
		}
		
		//统计边
		
		for(int i = 0;i <vlen;i++) {
			for(int j =0;j<vlen;j++) {
				if(this.matrix[i][j] != INF) {
					edgeNum ++;
				}
			}
		}
		
	}
	
	public void print() {
		System.out.println("邻接矩阵为");
		for(int i =0;i<vertexs.length;i++) {
			for(int j =0;j<vertexs.length;j++) {
				System.out.printf("%15d\t",matrix[i][j]);  //20表示占位
			}
			System.out.println();
		}
	}

}
