package graph;

import java.util.ArrayList;
import java.util.Arrays;

public class Graph {
    
	private ArrayList<String> vertexList; //存储顶点集合
	
	private int numOfEdges;   //存储图对应的邻接矩阵
	
	private int[][] edges;   //表示边的数目
	
	
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
       int n = 5;
       String VertexValue[] = {"A","B","C","D","E"};
       
       Graph graph = new Graph(n);
       
       for(String vertex:VertexValue) {
    	   graph.insertVertex(vertex);
       }
       
       //添加边
       graph.insertEdge(0, 1, 1);
       graph.insertEdge(0, 2, 1);
       graph.insertEdge(1, 2, 1);
       graph.insertEdge(1, 3, 1);
       graph.insertEdge(1, 4, 1);
       
       graph.showGraph();
       
	}
	
	
	public Graph(int n) {
		edges = new int[n][n];
		vertexList = new ArrayList<String>(n);
		numOfEdges = 0;
	}
	
	//图中常用的方法
	//返回结点个数
	
	public int getNumOfVertex() {
		return vertexList.size();
	}
	
	//
	public int getNumOfEdges() {
		return numOfEdges;
	}
	
	//返回结点i（下标）对应的数据：0-》A
	public String getVertex(int i) {
		return vertexList.get(i);
	}
	
	//插入结点
	public void insertVertex(String vertex) {
		vertexList.add(vertex);
	}
    
	public int getWeight(int v1,int v2) {
		return edges[v1][v2];
	}
	//添加边
	/**
	 * 
	 * @param v1 表示点的下标。即是第几个顶点
	 * @param v2 第二个顶点对应的下标
	 * @param weight
	 */
	public void insertEdge(int v1,int v2,int weight) {
		edges[v1][v2] = weight;
		edges[v2][v1] = weight;
		numOfEdges++;
	}
	
	//显示矩阵
	
	public void showGraph() {
		for(int[] link : edges) {
			System.err.println(Arrays.toString(link));
		}
	}
}
