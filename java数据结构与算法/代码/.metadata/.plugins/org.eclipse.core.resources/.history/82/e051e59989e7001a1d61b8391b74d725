package dijkstra;

import java.util.Arrays;

public class Dijkstra {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
         char[] vertex = {'A','B','C','D','E','F','G'};
         int[][] matrix = new int[vertex.length][vertex.length];
         final int N = 65535;
         
         matrix[0]=new int[]{N,5,7,N,N,N,2};  
         matrix[1]=new int[]{5,N,N,9,N,N,3};  
         matrix[2]=new int[]{7,N,N,N,8,N,N};  
         matrix[3]=new int[]{N,9,N,N,N,4,N};  
         matrix[4]=new int[]{N,N,8,N,N,5,4};  
         matrix[5]=new int[]{N,N,N,4,5,N,6};  
         matrix[6]=new int[]{2,3,N,N,4,6,N};
         
         Graph graph = new Graph(vertex,matrix);
         graph.showGraph();
	}

}


class Graph{
	private char[] vertex; //顶点数组
	private int[][] matrix;//邻接矩阵
	
	//构造器
	
	public Graph(char[] vertex,int[][] matrix) {
		this.vertex = vertex;
		this.matrix = matrix;
		
	}
	
	public void showGraph() {
		for(int[] link:matrix) {
			System.out.println(Arrays.toString(link));
		}
	}
}

class VisitedVertex {
	// 记录各个顶点是否访问过 1表示访问过,0未访问,会动态更新
	public int[] already_arr;
	// 每个下标对应的值为前一个顶点下标, 会动态更新
	public int[] pre_visited;
	// 记录出发顶点到其他所有顶点的距离,比如G为出发顶点，就会记录G到其它顶点的距离，会动态更新，求的最短距离就会存放到dis
	public int[] dis;
	
	
	//构造器
	/**
	 * 
	 * @param length :表示顶点的个数 
	 * @param index: 出发顶点对应的下标, 比如G顶点，下标就是6
	 */
	public VisitedVertex(int length,int index) {
		this.already_arr = new int[length];
		this.pre_visited = new int[length];
		this.dis = new int[length];
		
		//初始化dis这个数组
		Arrays.fill(dis, 65536);
	}
}
	
	
	
	
	
	